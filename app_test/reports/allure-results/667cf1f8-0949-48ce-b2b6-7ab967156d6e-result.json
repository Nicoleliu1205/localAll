{"name": "test_login[2072583546-np123456-True]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <flutter_app_test.testcases.test_login.TestLogin object at 0x00000167F6A6ED50>, username = '2072583546', password = 'np123456'\nexpected = True\n\n    @pytest.mark.parametrize(\"username,password,expected\", [\n        (\"2072583546\", \"np123456\", True),\n        # (\"invalid_user\", \"invalid_pass\", False),\n    ])\n    def test_login(self, username, password, expected):\n        login_page = LoginPage(self.driver)\n>       login_page.login(username, password)\n\ntestcases\\test_login.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects\\login_page.py:48: in login\n    self.click_login()\npageobjects\\login_page.py:34: in click_login\n    WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cdd8e826-2b19-4796-8868-9d1e08f76566\")>\nmethod = <function LoginPage.click_login.<locals>.<lambda> at 0x00000167F6B1F740>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "parameters": [{"name": "username", "value": "'2072583546'"}, {"name": "password", "value": "'np123456'"}, {"name": "expected", "value": "True"}], "start": 1748509001863, "stop": 1748509013614, "uuid": "eb5a388b-3c2c-4928-a8cf-faa05daefc57", "historyId": "cb29e78f39d4e5d3782070b664c1f744", "testCaseId": "93a39feb8eb701231e6c069b76eeac98", "fullName": "testcases.test_login.TestLogin#test_login", "labels": [{"name": "feature", "value": "登录功能"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-QVK4EQ1"}, {"name": "thread", "value": "33408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}