{"name": "test_login[invalid_user-invalid_pass-False]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot invoke method public void androidx.test.uiautomator.GestureController.performGesture(androidx.test.uiautomator.PointerGesture[]) on object androidx.test.uiautomator.GestureController@5545cb4 with parameters [[Landroidx.test.uiautomator.PointerGesture;@ded7587]\nStacktrace:\nio.appium.uiautomator2.common.exceptions.UiAutomator2Exception: Cannot invoke method public void androidx.test.uiautomator.GestureController.performGesture(androidx.test.uiautomator.PointerGesture[]) on object androidx.test.uiautomator.GestureController@5545cb4 with parameters [[Landroidx.test.uiautomator.PointerGesture;@ded7587]\n\tat io.appium.uiautomator2.utils.ReflectionUtils.invoke(ReflectionUtils.java:85)\n\tat io.appium.uiautomator2.model.internal.GestureController.performGesture(GestureController.java:64)\n\tat io.appium.uiautomator2.model.internal.GestureController.click(GestureController.java:89)\n\tat io.appium.uiautomator2.core.AxNodeInfoHelper.click(AxNodeInfoHelper.java:131)\n\tat io.appium.uiautomator2.model.BaseElement.click(BaseElement.java:64)\n\tat io.appium.uiautomator2.handler.Click.safeHandle(Click.java:37)\n\tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:266)\n\tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:260)\n\tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:68)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n\tat java.lang.Thread.run(Thread.java:1012)\nCaused by: java.lang.reflect.InvocationTargetException\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat io.appium.uiautomator2.utils.ReflectionUtils.invoke(ReflectionUtils.java:83)\n\t... 39 more\nCaused by: java.lang.SecurityException: Injecting input events requires the caller (or the source of the instrumentation, if any) to have the INJECT_EVENTS permission.\n\tat android.os.Parcel.createExceptionOrNull(Parcel.java:3011)\n\tat android.os.Parcel.createException(Parcel.java:2995)\n\tat android.os.Parcel.readException(Parcel.java:2978)\n\tat android.os.Parcel.readException(Parcel.java:2920)\n\tat android.app.IUiAutomationConnection$Stub$Proxy.injectInputEvent(IUiAutomationConnection.java:474)\n\tat android.app.UiAutomation.injectInputEvent(UiAutomation.java:812)\n\tat android.app.UiAutomation.injectInputEvent(UiAutomation.java:785)\n\tat androidx.test.uiautomator.GestureController.performGesture(GestureController.java:150)\n\t... 41 more", "trace": "self = <flutter_app_test.testcases.test_login.TestLogin object at 0x000001F01E23ED50>, username = 'invalid_user', password = 'invalid_pass'\nexpected = False\n\n    @pytest.mark.parametrize(\"username,password,expected\", [\n        (\"2072583546\", \"np123456\", True),\n        (\"invalid_user\", \"invalid_pass\", False),\n    ])\n    def test_login(self, username, password, expected):\n        login_page = LoginPage(self.driver)\n>       login_page.login(username, password)\n\ntestcases\\test_login.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobjects\\login_page.py:27: in login\n    self.click_login()\npageobjects\\login_page.py:17: in click_login\n    self.driver.find_element(AppiumBy.ID, \"com.newpay.merchant:id/tvb_login\").click()\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F01E3765D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\n\\\\tat androidx.test.uiautomator.GestureController.performGesture(GestureController.java:150)\\\\n\\\\t... 41 more\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        https://www.w3.org/TR/webdriver/#errors\n        \"\"\"\n        payload = response.get('value', '')\n        if isinstance(payload, dict):\n            payload_dict = payload\n        else:\n            try:\n                payload_dict = json.loads(payload)\n            except (json.JSONDecodeError, TypeError):\n                return\n            if not isinstance(payload_dict, dict):\n                return\n        value = payload_dict.get('value')\n        if not isinstance(value, dict):\n            return\n        error = value.get('error')\n        if not error:\n            return\n    \n        message = value.get('message', error)\n        stacktrace = value.get('stacktrace', '')\n        # In theory, we should also be checking HTTP status codes.\n        # Java client, for example, prints a warning if the actual `error`\n        # value does not match to the response's HTTP status code.\n        exception_class: Type[sel_exceptions.WebDriverException] = ERROR_TO_EXC_MAPPING.get(\n            error, sel_exceptions.WebDriverException\n        )\n        if exception_class is sel_exceptions.WebDriverException and message:\n            if message == 'No such context found.':\n                exception_class = appium_exceptions.NoSuchContextException\n            elif message == 'That command could not be executed in the current context.':\n                exception_class = appium_exceptions.InvalidSwitchToTargetException\n    \n        if exception_class is sel_exceptions.UnexpectedAlertPresentException:\n            raise sel_exceptions.UnexpectedAlertPresentException(\n                msg=message,\n                stacktrace=format_stacktrace(stacktrace),\n                alert_text=value.get('data'),\n            )\n>       raise exception_class(msg=message, stacktrace=format_stacktrace(stacktrace))\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot invoke method public void androidx.test.uiautomator.GestureController.performGesture(androidx.test.uiautomator.PointerGesture[]) on object androidx.test.uiautomator.GestureController@5545cb4 with parameters [[Landroidx.test.uiautomator.PointerGesture;@ded7587]\nE       Stacktrace:\nE       io.appium.uiautomator2.common.exceptions.UiAutomator2Exception: Cannot invoke method public void androidx.test.uiautomator.GestureController.performGesture(androidx.test.uiautomator.PointerGesture[]) on object androidx.test.uiautomator.GestureController@5545cb4 with parameters [[Landroidx.test.uiautomator.PointerGesture;@ded7587]\nE       \tat io.appium.uiautomator2.utils.ReflectionUtils.invoke(ReflectionUtils.java:85)\nE       \tat io.appium.uiautomator2.model.internal.GestureController.performGesture(GestureController.java:64)\nE       \tat io.appium.uiautomator2.model.internal.GestureController.click(GestureController.java:89)\nE       \tat io.appium.uiautomator2.core.AxNodeInfoHelper.click(AxNodeInfoHelper.java:131)\nE       \tat io.appium.uiautomator2.model.BaseElement.click(BaseElement.java:64)\nE       \tat io.appium.uiautomator2.handler.Click.safeHandle(Click.java:37)\nE       \tat io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:59)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleRequest(AppiumServlet.java:266)\nE       \tat io.appium.uiautomator2.server.AppiumServlet.handleHttpRequest(AppiumServlet.java:260)\nE       \tat io.appium.uiautomator2.http.ServerHandler.channelRead(ServerHandler.java:68)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)\nE       \tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)\nE       \tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:345)\nE       \tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1294)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:366)\nE       \tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:352)\nE       \tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:911)\nE       \tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:611)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:552)\nE       \tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:466)\nE       \tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:438)\nE       \tat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:140)\nE       \tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\nE       \tat java.lang.Thread.run(Thread.java:1012)\nE       Caused by: java.lang.reflect.InvocationTargetException\nE       \tat java.lang.reflect.Method.invoke(Native Method)\nE       \tat io.appium.uiautomator2.utils.ReflectionUtils.invoke(ReflectionUtils.java:83)\nE       \t... 39 more\nE       Caused by: java.lang.SecurityException: Injecting input events requires the caller (or the source of the instrumentation, if any) to have the INJECT_EVENTS permission.\nE       \tat android.os.Parcel.createExceptionOrNull(Parcel.java:3011)\nE       \tat android.os.Parcel.createException(Parcel.java:2995)\nE       \tat android.os.Parcel.readException(Parcel.java:2978)\nE       \tat android.os.Parcel.readException(Parcel.java:2920)\nE       \tat android.app.IUiAutomationConnection$Stub$Proxy.injectInputEvent(IUiAutomationConnection.java:474)\nE       \tat android.app.UiAutomation.injectInputEvent(UiAutomation.java:812)\nE       \tat android.app.UiAutomation.injectInputEvent(UiAutomation.java:785)\nE       \tat androidx.test.uiautomator.GestureController.performGesture(GestureController.java:150)\nE       \t... 41 more\n\n..\\.venv\\Lib\\site-packages\\appium\\webdriver\\errorhandler.py:125: WebDriverException"}, "parameters": [{"name": "username", "value": "'invalid_user'"}, {"name": "password", "value": "'invalid_pass'"}, {"name": "expected", "value": "False"}], "start": 1748489090420, "stop": 1748489092260, "uuid": "fe15fdc0-00f6-4567-b50a-45f2c5b84d7b", "historyId": "1b6026c39fcb6726426cb1cdc25e9381", "testCaseId": "93a39feb8eb701231e6c069b76eeac98", "fullName": "testcases.test_login.TestLogin#test_login", "labels": [{"name": "feature", "value": "登录功能"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-QVK4EQ1"}, {"name": "thread", "value": "28836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}